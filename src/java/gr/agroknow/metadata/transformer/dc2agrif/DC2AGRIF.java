/* The following code was generated by JFlex 1.4.1 on 6/16/13 2:10 PM */

package gr.agroknow.metadata.transformer.dc2agrif;

import gr.agroknow.metadata.agrif.Agrif;
import gr.agroknow.metadata.agrif.Citation;
import gr.agroknow.metadata.agrif.ControlledBlock;
import gr.agroknow.metadata.agrif.Creator;
import gr.agroknow.metadata.agrif.Expression;
import gr.agroknow.metadata.agrif.Item;
import gr.agroknow.metadata.agrif.LanguageBlock;
import gr.agroknow.metadata.agrif.Manifestation;
import gr.agroknow.metadata.agrif.Relation;
import gr.agroknow.metadata.agrif.Rights;
import gr.agroknow.metadata.agrif.Publisher;

import gr.agroknow.metadata.transformer.ParamManager;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.ArrayList;

import net.zettadata.generator.tools.Toolbox;
import net.zettadata.generator.tools.ToolboxException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/16/13 2:10 PM from the specification file
 * <tt>/Users/dmssrt/home/projects/agroKnow/code/dfid2agrif/src/conf/dc2agrif.jflex</tt>
 */
class DC2AGRIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CITATION = 3;
  public static final int AGRIF = 1;
  public static final int DESCRIPTION = 2;
  public static final int YYINITIAL = 0;
  public static final int TITLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\34\25\0\1\16\1\44\1\24\3\0\1\42\7\0\1\31"+
    "\1\11\1\0\1\33\10\0\1\10\1\43\1\1\1\23\1\12\2\0"+
    "\1\50\1\0\1\46\1\47\17\0\1\51\6\0\1\45\1\0\1\52"+
    "\1\0\1\5\1\0\1\3\1\40\1\7\1\6\1\15\1\36\1\32"+
    "\1\25\1\4\1\41\1\0\1\14\1\20\1\21\1\2\1\26\1\0"+
    "\1\30\1\22\1\13\1\27\1\37\1\0\1\17\1\35\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\3\1\2\2\1\3\3\2\16\0\1\4\117\0"+
    "\1\5\30\0\1\6\11\0\1\7\62\0\1\10\u0149\0"+
    "\1\11\22\0\1\12\35\0\1\13\37\0\1\14\2\0"+
    "\1\15\44\0\1\16\10\0\1\17\1\0\1\20\14\0"+
    "\1\21\14\0\1\22\12\0\1\23\1\0\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[696];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\327\0\u0158\0\327\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\327\0\u045e\0\u0489\0\u04b4"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\u114d\0\u1178\0\327\0\u11a3\0\u11ce\0\u11f9"+
    "\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351"+
    "\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9"+
    "\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\327\0\u15ab\0\u15d6"+
    "\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\327"+
    "\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b"+
    "\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63"+
    "\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb"+
    "\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13"+
    "\0\u1f3e\0\u1f69\0\327\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040"+
    "\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198"+
    "\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0"+
    "\0\u231b\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448"+
    "\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0"+
    "\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8"+
    "\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850"+
    "\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8"+
    "\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00"+
    "\0\u2b2b\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58"+
    "\0\u2c83\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0"+
    "\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08"+
    "\0\u2f33\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060"+
    "\0\u308b\0\u30b6\0\u30e1\0\u310c\0\u3137\0\u3162\0\u318d\0\u31b8"+
    "\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5\0\u3310"+
    "\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468"+
    "\0\u3493\0\u34be\0\u34e9\0\u3514\0\u353f\0\u356a\0\u3595\0\u35c0"+
    "\0\u35eb\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2\0\u36ed\0\u3718"+
    "\0\u3743\0\u376e\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845\0\u3870"+
    "\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972\0\u399d\0\u39c8"+
    "\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5\0\u3b20"+
    "\0\u3b4b\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d\0\u3c78"+
    "\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0"+
    "\0\u3dfb\0\u3e26\0\u3e51\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28"+
    "\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080"+
    "\0\u40ab\0\u40d6\0\u4101\0\u412c\0\u4157\0\u4182\0\u41ad\0\u41d8"+
    "\0\u4203\0\u422e\0\u4259\0\u4284\0\u42af\0\u42da\0\u4305\0\u4330"+
    "\0\u435b\0\u4386\0\u43b1\0\u43dc\0\u4407\0\u4432\0\u445d\0\u4488"+
    "\0\u44b3\0\u44de\0\u4509\0\u4534\0\u455f\0\u458a\0\u45b5\0\u45e0"+
    "\0\u460b\0\u4636\0\u4661\0\u468c\0\u46b7\0\u46e2\0\u470d\0\u4738"+
    "\0\u4763\0\u478e\0\u47b9\0\u47e4\0\u480f\0\u483a\0\u4865\0\u4890"+
    "\0\u48bb\0\u48e6\0\u4911\0\u493c\0\u4967\0\u4992\0\u49bd\0\u49e8"+
    "\0\u4a13\0\u4a3e\0\u4a69\0\u4a94\0\u4abf\0\u4aea\0\u4b15\0\u4b40"+
    "\0\u4b6b\0\u4b96\0\u4bc1\0\u4bec\0\u4c17\0\u4c42\0\u4c6d\0\u4c98"+
    "\0\u4cc3\0\u4cee\0\u4d19\0\u4d44\0\u4d6f\0\u4d9a\0\u4dc5\0\u4df0"+
    "\0\u4e1b\0\u4e46\0\u4e71\0\u4e9c\0\u4ec7\0\u4ef2\0\u4f1d\0\u4f48"+
    "\0\u4f73\0\u4f9e\0\u4fc9\0\u4ff4\0\u501f\0\u504a\0\u5075\0\u50a0"+
    "\0\u50cb\0\u50f6\0\u5121\0\u514c\0\u5177\0\u51a2\0\u51cd\0\u51f8"+
    "\0\u5223\0\u524e\0\u5279\0\u52a4\0\u52cf\0\u52fa\0\u5325\0\u5350"+
    "\0\u537b\0\u53a6\0\u53d1\0\u53fc\0\u5427\0\u5452\0\u547d\0\u54a8"+
    "\0\u54d3\0\u54fe\0\u5529\0\u5554\0\u557f\0\u55aa\0\u55d5\0\u5600"+
    "\0\u562b\0\u5656\0\u5681\0\u56ac\0\327\0\u56d7\0\u5702\0\u572d"+
    "\0\u5758\0\u5783\0\u57ae\0\u57d9\0\u5804\0\u582f\0\u585a\0\u5885"+
    "\0\u58b0\0\u58db\0\u5906\0\u5931\0\u595c\0\u5987\0\u59b2\0\327"+
    "\0\u59dd\0\u5a08\0\u5a33\0\u5a5e\0\u5a89\0\u5ab4\0\u5adf\0\u5b0a"+
    "\0\u5b35\0\u5b60\0\u5b8b\0\u5bb6\0\u5be1\0\u5c0c\0\u5c37\0\u5c62"+
    "\0\u5c8d\0\u5cb8\0\u5ce3\0\u5d0e\0\u5d39\0\u5d64\0\u5d8f\0\u5dba"+
    "\0\u5de5\0\u5e10\0\u5e3b\0\u5e66\0\u5e91\0\327\0\u5ebc\0\u5ee7"+
    "\0\u5f12\0\u5f3d\0\u5f68\0\u5f93\0\u5fbe\0\u5fe9\0\u6014\0\u603f"+
    "\0\u606a\0\u6095\0\u60c0\0\u60eb\0\u6116\0\u6141\0\u616c\0\u6197"+
    "\0\u61c2\0\u61ed\0\u6218\0\u6243\0\u626e\0\u6299\0\u62c4\0\u62ef"+
    "\0\u631a\0\u6345\0\u6370\0\u639b\0\u63c6\0\u562b\0\u63f1\0\u641c"+
    "\0\u5702\0\u6447\0\u6472\0\u649d\0\u64c8\0\u64f3\0\u651e\0\u6549"+
    "\0\u6574\0\u659f\0\u65ca\0\u65f5\0\u6620\0\u664b\0\u6676\0\u66a1"+
    "\0\u66cc\0\u66f7\0\u6722\0\u674d\0\u6778\0\u67a3\0\u67ce\0\u67f9"+
    "\0\u6824\0\u684f\0\u687a\0\u68a5\0\u68d0\0\u68fb\0\u6926\0\u6951"+
    "\0\u697c\0\u69a7\0\u69d2\0\u69fd\0\u6a28\0\u5b60\0\u6a53\0\u6a7e"+
    "\0\u6aa9\0\u6ad4\0\u6aff\0\u6b2a\0\u6b55\0\u6b80\0\u5c37\0\u6bab"+
    "\0\u5ce3\0\u6bd6\0\u6c01\0\u6c2c\0\u6c57\0\u6c82\0\u6cad\0\u6cd8"+
    "\0\u6d03\0\u6d2e\0\u6d59\0\u6d84\0\u6daf\0\u5e66\0\u6dda\0\u6e05"+
    "\0\u6e30\0\u6e5b\0\u6e86\0\u6eb1\0\u6edc\0\u6f07\0\u6f32\0\u6f5d"+
    "\0\u6f88\0\u6fb3\0\u5e66\0\u6fde\0\u7009\0\u7034\0\u705f\0\u708a"+
    "\0\u70b5\0\u70e0\0\u710b\0\u7136\0\u7161\0\u6bab\0\u718c\0\u6bab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[696];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\52\6\1\10\51\6\1\11\1\12\32\11"+
    "\1\13\5\11\1\14\7\11\1\15\53\6\1\11\1\16"+
    "\51\11\55\0\1\17\56\0\1\20\2\0\1\21\52\0"+
    "\1\22\32\0\1\23\22\0\1\24\110\0\1\25\11\0"+
    "\1\26\44\0\1\27\56\0\1\30\45\0\1\31\56\0"+
    "\1\32\111\0\1\33\20\0\1\34\51\0\1\35\46\0"+
    "\1\36\50\0\1\37\56\0\1\40\45\0\1\41\56\0"+
    "\1\42\111\0\1\43\47\0\1\44\16\0\1\45\50\0"+
    "\1\46\51\0\1\47\1\0\1\50\1\51\3\0\1\52"+
    "\6\0\1\53\5\0\1\54\26\0\1\55\56\0\1\56"+
    "\111\0\1\57\43\0\1\60\22\0\1\61\50\0\1\62"+
    "\52\0\1\63\47\0\1\64\11\0\1\65\37\0\1\66"+
    "\25\0\1\67\26\0\1\70\30\0\1\71\44\0\1\72"+
    "\40\0\1\73\42\0\1\74\53\0\1\75\114\0\1\76"+
    "\32\0\1\77\35\0\1\100\46\0\1\101\60\0\1\102"+
    "\50\0\1\103\61\0\1\104\67\0\1\105\30\0\1\106"+
    "\50\0\1\107\65\0\1\110\64\0\1\111\26\0\1\112"+
    "\44\0\1\113\61\0\1\114\106\0\1\115\12\0\1\116"+
    "\45\0\1\117\56\0\1\120\63\0\1\121\46\0\1\122"+
    "\44\0\1\123\60\0\1\124\40\0\1\125\63\0\1\126"+
    "\53\0\1\127\76\0\1\130\14\0\1\131\56\0\1\132"+
    "\65\0\1\133\100\0\1\134\44\0\1\135\23\0\1\136"+
    "\45\0\1\137\57\0\1\140\55\0\1\141\64\0\1\142"+
    "\52\0\1\143\35\0\1\144\54\0\1\145\53\0\1\146"+
    "\51\0\1\147\50\0\1\150\47\0\1\151\51\0\1\152"+
    "\110\0\1\35\37\0\1\153\34\0\1\154\45\0\1\155"+
    "\47\0\1\156\65\0\1\157\37\0\1\160\51\0\1\161"+
    "\51\0\1\162\66\0\1\163\53\0\1\164\42\0\1\165"+
    "\47\0\1\166\54\0\1\167\74\0\1\170\35\0\1\171"+
    "\54\0\1\172\73\0\1\173\34\0\1\174\60\0\1\175"+
    "\56\0\1\176\50\0\1\177\41\0\1\200\53\0\1\201"+
    "\45\0\1\202\41\0\1\203\57\0\1\204\47\0\1\205"+
    "\111\0\1\13\21\0\1\206\44\0\1\207\62\0\1\210"+
    "\51\0\1\211\54\0\1\212\53\0\1\213\54\0\1\214"+
    "\46\0\1\215\54\0\1\216\55\0\1\217\43\0\1\220"+
    "\66\0\1\221\41\0\1\222\56\0\1\223\35\0\1\224"+
    "\64\0\1\225\53\0\1\226\47\0\1\227\57\0\1\230"+
    "\50\0\1\231\51\0\1\232\47\0\1\233\67\0\1\234"+
    "\44\0\1\235\32\0\1\236\67\0\1\237\53\0\1\240"+
    "\53\0\1\241\53\0\1\242\50\0\1\243\51\0\1\244"+
    "\37\0\1\245\64\0\1\246\44\0\1\247\63\0\1\250"+
    "\51\0\1\251\46\0\1\252\60\0\1\253\40\0\1\254"+
    "\56\0\1\255\56\0\1\256\34\0\1\257\67\0\1\260"+
    "\41\0\1\261\62\0\1\262\50\0\1\263\57\0\1\264"+
    "\41\0\1\265\50\0\1\266\65\0\1\267\45\0\1\270"+
    "\57\0\1\271\51\0\1\272\41\0\1\273\62\0\1\274"+
    "\54\0\1\275\53\0\1\276\36\0\1\277\53\0\1\300"+
    "\65\0\1\301\51\0\1\302\43\0\1\303\54\0\1\304"+
    "\61\0\1\305\47\0\1\306\54\0\1\307\40\0\1\310"+
    "\51\0\1\311\66\0\1\312\37\0\1\313\64\0\1\314"+
    "\51\0\1\315\55\0\1\316\42\0\1\317\46\0\1\320"+
    "\50\0\1\321\67\0\1\322\53\0\1\323\34\0\1\324"+
    "\54\0\1\325\64\0\1\326\55\0\1\327\46\0\1\330"+
    "\37\0\1\331\53\0\1\332\67\0\1\333\53\0\1\334"+
    "\34\0\1\335\51\0\1\336\54\0\1\337\55\0\1\340"+
    "\61\0\1\341\37\0\1\342\66\0\1\343\54\0\1\344"+
    "\40\0\1\345\62\0\1\346\36\0\1\347\51\0\1\350"+
    "\57\0\1\351\47\0\1\352\65\0\1\353\53\0\1\354"+
    "\41\0\1\355\52\0\1\356\63\0\1\357\51\0\1\360"+
    "\36\0\1\361\71\0\1\362\32\0\1\363\70\0\1\364"+
    "\53\0\1\365\40\0\1\366\65\0\1\367\51\0\1\370"+
    "\51\0\1\371\51\0\1\372\37\0\1\373\51\0\1\374"+
    "\70\0\1\375\40\0\1\376\65\0\1\377\34\0\1\u0100"+
    "\55\0\1\u0101\64\0\1\u0102\51\0\1\u0103\37\0\1\u0104"+
    "\64\0\1\u0105\42\0\1\u0106\52\0\1\u0107\47\0\1\u0108"+
    "\53\0\1\u0109\54\0\1\u010a\52\0\1\u010b\64\0\1\u010c"+
    "\36\0\1\u010d\65\0\1\u010e\41\0\1\u010f\65\0\1\u0110"+
    "\35\0\1\u0111\52\0\1\u0112\67\0\1\u0113\37\0\1\u0114"+
    "\52\0\1\u0115\65\0\1\u0116\51\0\1\u0117\53\0\1\u0118"+
    "\34\0\1\u0119\53\0\1\u011a\67\0\1\u011b\34\0\1\u011c"+
    "\70\0\1\u011d\37\0\1\u011e\66\0\1\u011f\36\0\1\u0120"+
    "\47\0\1\u0121\53\0\1\u0122\67\0\1\u0123\53\0\1\u0124"+
    "\34\0\1\u0125\51\0\1\u0126\70\0\1\u0127\54\0\1\u0128"+
    "\35\0\1\u0129\50\0\1\u012a\52\0\1\u012b\70\0\1\u012c"+
    "\53\0\1\u012d\33\0\1\u012e\52\0\1\u012f\51\0\1\u0130"+
    "\56\0\1\u0131\64\0\1\u0132\35\0\1\u0133\67\0\1\u0134"+
    "\54\0\1\u0135\36\0\1\u0136\64\0\1\u0137\35\0\1\u0138"+
    "\52\0\1\u0139\72\0\1\u013a\31\0\1\u013b\70\0\1\u013c"+
    "\53\0\1\u013d\37\0\1\u013e\67\0\1\u013f\50\0\1\u0140"+
    "\51\0\1\u0141\35\0\1\u0142\43\0\1\u0143\61\0\1\u0144"+
    "\70\0\1\u0145\53\0\1\u0146\53\0\1\u0147\23\0\1\u0148"+
    "\100\0\1\u0149\51\0\1\u014a\51\0\1\u014b\54\0\1\u014c"+
    "\33\0\1\u014d\71\0\1\u014e\36\0\1\u014f\40\0\1\u0150"+
    "\100\0\1\u0151\36\0\1\u0152\66\0\1\u0153\51\0\1\u0154"+
    "\55\0\1\u0155\46\0\1\u0156\40\0\1\u0157\67\0\1\u0158"+
    "\51\0\1\u0159\54\0\1\u015a\51\0\1\u015b\35\0\1\u015c"+
    "\66\0\1\u015d\33\0\1\u015e\70\0\1\u015f\54\0\1\u0160"+
    "\23\0\1\u0161\102\0\1\u0162\31\0\1\u0163\43\0\1\u0164"+
    "\101\0\1\u0165\35\0\1\u0166\44\0\1\u0167\74\0\1\u0168"+
    "\24\0\1\u0169\100\0\1\u016a\33\0\1\u016b\47\0\1\u016c"+
    "\74\0\1\u016d\24\0\1\u016e\101\0\1\u016f\30\0\1\u0170"+
    "\57\0\1\u0171\66\0\1\u0172\54\0\1\u0173\26\0\1\u0174"+
    "\53\0\1\u0175\75\0\1\u0176\50\0\1\u0177\24\0\1\u0178"+
    "\61\0\1\u0179\72\0\1\u017a\53\0\1\u017b\31\0\1\u017c"+
    "\50\0\1\u017d\54\0\1\u017e\52\0\1\u017f\73\0\1\u0180"+
    "\50\0\1\u0181\37\0\1\u0182\37\0\1\u0183\61\0\1\u0184"+
    "\47\0\1\u0185\55\0\1\u0186\56\0\1\u0187\43\0\1\u0188"+
    "\55\0\1\u0189\73\0\1\u018a\34\0\1\u018b\66\0\1\u018c"+
    "\30\0\1\u018d\53\0\1\u018e\60\0\1\u018f\51\0\1\u0190"+
    "\45\0\1\u0191\51\0\1\u0192\55\0\1\u0193\56\0\1\u0194"+
    "\67\0\1\u0195\27\0\1\u0196\54\0\1\u0197\55\0\1\u0198"+
    "\53\0\1\u0199\46\0\1\u019a\50\0\1\u019b\51\0\1\u019c"+
    "\64\0\1\u019d\43\0\1\u019e\52\0\1\u019f\56\0\1\u01a0"+
    "\52\0\1\u01a1\55\0\1\u01a2\47\0\1\u01a3\46\0\1\u01a4"+
    "\50\0\1\u01a5\60\0\1\u01a6\43\0\1\u01a7\61\0\1\u01a8"+
    "\51\0\1\u01a9\56\0\1\u01aa\47\0\1\u01ab\51\0\1\u01ac"+
    "\53\0\1\u01ad\46\0\1\u01ae\62\0\1\u01af\40\0\1\u01b0"+
    "\57\0\1\u01b1\53\0\1\u01b2\52\0\1\u01b3\56\0\1\u01b4"+
    "\46\0\1\u01b5\51\0\1\u01b6\53\0\1\u01b7\50\0\1\u01b8"+
    "\50\0\1\u01b9\56\0\1\u01ba\55\0\1\u01bb\53\0\1\u01bc"+
    "\44\0\1\u01bd\57\0\1\u01be\47\0\1\u01bf\51\0\1\u01c0"+
    "\60\0\1\u01c1\45\0\1\u01c2\55\0\1\u01c3\47\0\1\u01c4"+
    "\50\0\1\u01c5\61\0\1\u01c6\45\0\1\u01c7\55\0\1\u01c8"+
    "\47\0\1\u01c9\46\0\1\u01ca\55\0\1\u01cb\53\0\1\u01cc"+
    "\56\0\1\u01cd\53\0\1\u01ce\41\0\1\u01cf\62\0\1\u01d0"+
    "\46\0\1\u01d1\55\0\1\u01d2\65\0\1\u01d3\34\0\1\u01d4"+
    "\56\0\1\u01d5\44\0\1\u01d6\50\0\1\u01d7\74\0\1\u01d8"+
    "\32\0\1\u01d9\60\0\1\u01da\46\0\1\u01db\66\0\1\u01dc"+
    "\41\0\1\u01dd\45\0\1\u01de\61\0\1\u01df\63\0\1\u01e0"+
    "\50\0\1\u01e1\43\0\1\u01e2\43\0\1\u01e3\60\0\1\u01e4"+
    "\64\0\1\u01e5\34\0\1\u01e6\57\0\1\u01e7\41\0\1\u01e8"+
    "\72\0\1\u01e9\54\0\1\u01ea\30\0\1\u01eb\63\0\1\u01ec"+
    "\43\0\1\u01ed\50\0\1\u01ee\62\0\1\u01ef\42\0\1\u01f0"+
    "\74\0\1\u01f1\52\0\1\u01f2\30\0\1\u01f3\74\0\1\u01f4"+
    "\30\0\1\u01f5\63\0\1\u01f6\54\0\1\u01f7\41\0\1\u01f8"+
    "\72\0\1\u01f9\50\0\1\u01fa\32\0\1\u01fb\65\0\1\u01fc"+
    "\57\0\1\u01fd\54\0\1\u01fe\30\0\1\u01ff\53\0\1\u0200"+
    "\62\0\1\u0201\61\0\1\u0202\54\0\1\u0203\43\0\1\u0204"+
    "\40\0\1\u0205\73\0\1\u0206\50\0\1\u0207\54\0\1\u0208"+
    "\17\0\34\u0209\1\0\16\u0209\11\0\1\u020a\74\0\1\u020b"+
    "\30\0\1\u020c\53\0\1\u020d\3\0\1\u020e\34\0\34\u020f"+
    "\1\0\16\u020f\11\0\1\u0210\74\0\1\u0211\50\0\1\u0212"+
    "\21\0\1\u0209\1\u0213\32\u0209\1\0\16\u0209\33\0\1\u0214"+
    "\30\0\1\u0215\65\0\1\u0216\37\0\1\u0217\41\0\1\u020f"+
    "\1\u0218\32\u020f\1\0\16\u020f\24\0\1\u0219\37\0\1\u021a"+
    "\74\0\1\u021b\17\0\1\u0209\1\u0213\7\u0209\1\u021c\22\u0209"+
    "\1\0\16\u0209\31\0\1\u021d\45\0\1\u021e\44\0\1\u021f"+
    "\46\0\1\u0220\40\0\1\u020f\1\u0218\7\u020f\1\u0221\22\u020f"+
    "\1\0\16\u020f\12\0\1\u0222\64\0\1\u0223\37\0\1\u0224"+
    "\41\0\1\u0209\1\u0213\4\u0209\1\u0225\25\u0209\1\0\16\u0209"+
    "\33\0\1\u0226\31\0\1\u0227\42\0\1\u0228\50\0\1\u020f"+
    "\1\u0218\4\u020f\1\u0229\25\u020f\1\0\16\u020f\34\u022a\1\0"+
    "\16\u022a\12\0\1\u022b\64\0\1\u022c\26\0\1\u0209\1\u0213"+
    "\5\u0209\1\u022d\24\u0209\1\0\16\u0209\11\0\1\u022e\41\0"+
    "\34\u022f\1\0\16\u022f\26\0\1\u0230\24\0\1\u020f\1\u0218"+
    "\5\u020f\1\u0231\24\u020f\1\0\16\u020f\1\u022a\1\u0232\32\u022a"+
    "\1\0\16\u022a\34\u0233\1\0\16\u0233\12\0\1\u0234\40\0"+
    "\1\u0209\1\u0213\6\u0209\1\u0235\23\u0209\1\0\16\u0209\24\0"+
    "\1\u0236\26\0\1\u022f\1\u0237\32\u022f\1\0\16\u022f\36\0"+
    "\1\u0238\14\0\1\u020f\1\u0218\6\u020f\1\u0239\23\u020f\1\0"+
    "\16\u020f\1\u022a\1\u0232\7\u022a\1\u023a\22\u022a\1\0\16\u022a"+
    "\1\u0233\1\u023b\32\u0233\1\0\16\u0233\34\u023c\1\0\16\u023c"+
    "\1\u0209\1\u0213\4\u0209\1\u023d\25\u0209\1\0\16\u0209\12\0"+
    "\1\u023e\40\0\1\u022f\1\u0237\7\u022f\1\u023f\22\u022f\1\0"+
    "\16\u022f\10\0\1\u0240\42\0\1\u020f\1\u0218\11\u020f\1\u0241"+
    "\20\u020f\1\0\16\u020f\1\u022a\1\u0232\4\u022a\1\u0242\25\u022a"+
    "\1\0\16\u022a\1\u0233\1\u023b\7\u0233\1\u0243\22\u0233\1\0"+
    "\16\u0233\1\u023c\1\u0244\27\u023c\1\u0245\2\u023c\1\0\16\u023c"+
    "\1\u0209\1\u0213\1\u0209\1\u0246\30\u0209\1\0\16\u0209\1\u022f"+
    "\1\u0237\4\u022f\1\u0247\25\u022f\1\0\16\u022f\30\0\1\u0248"+
    "\22\0\1\u020f\1\u0218\32\u020f\1\0\1\u0249\15\u020f\1\u022a"+
    "\1\u0232\5\u022a\1\u024a\24\u022a\1\0\16\u022a\1\u0233\1\u023b"+
    "\4\u0233\1\u024b\25\u0233\1\0\16\u0233\1\u023c\1\u0244\7\u023c"+
    "\1\u024c\17\u023c\1\u0245\2\u023c\1\0\17\u023c\1\u0244\24\u023c"+
    "\1\u024d\2\u023c\1\u0245\2\u023c\1\0\16\u023c\1\u0209\1\u0213"+
    "\11\u0209\1\u024e\20\u0209\1\0\16\u0209\1\u022f\1\u0237\5\u022f"+
    "\1\u024f\24\u022f\1\0\16\u022f\2\0\1\u0250\50\0\1\u020f"+
    "\1\u0218\24\u020f\1\u0251\5\u020f\1\0\16\u020f\1\u022a\1\u0232"+
    "\6\u022a\1\u0252\23\u022a\1\0\16\u022a\1\u0233\1\u023b\5\u0233"+
    "\1\u0253\24\u0233\1\0\16\u0233\1\u023c\1\u0244\4\u023c\1\u0254"+
    "\22\u023c\1\u0245\2\u023c\1\0\17\u023c\1\u0244\4\u023c\1\u0255"+
    "\22\u023c\1\u0245\2\u023c\1\0\16\u023c\1\u0209\1\u0213\13\u0209"+
    "\1\u0256\16\u0209\1\0\16\u0209\1\u022f\1\u0237\6\u022f\1\u0257"+
    "\23\u022f\1\0\16\u022f\14\0\1\u0258\36\0\1\u020f\1\u0218"+
    "\13\u020f\1\u0259\16\u020f\1\0\16\u020f\1\u022a\1\u0232\20\u022a"+
    "\1\u025a\11\u022a\1\0\16\u022a\1\u0233\1\u023b\6\u0233\1\u025b"+
    "\23\u0233\1\0\16\u0233\1\u023c\1\u0244\5\u023c\1\u025c\21\u023c"+
    "\1\u0245\2\u023c\1\0\17\u023c\1\u0244\27\u023c\1\u0245\2\u023c"+
    "\1\0\1\u023c\1\u025d\14\u023c\1\u0209\1\u0213\10\u0209\1\u025e"+
    "\21\u0209\1\0\16\u0209\1\u022f\1\u0237\5\u022f\1\u025f\24\u022f"+
    "\1\0\16\u022f\15\0\1\u0260\35\0\1\u020f\1\u0218\10\u020f"+
    "\1\u0261\21\u020f\1\0\16\u020f\1\u022a\1\u0232\25\u022a\1\u0262"+
    "\4\u022a\1\0\16\u022a\1\u0233\1\u023b\26\u0233\1\u0263\3\u0233"+
    "\1\0\16\u0233\1\u023c\1\u0244\6\u023c\1\u0264\20\u023c\1\u0245"+
    "\2\u023c\1\0\17\u023c\1\u0265\27\u023c\1\u0245\2\u023c\1\0"+
    "\16\u023c\1\u022f\1\u0237\1\u0266\31\u022f\1\0\16\u022f\23\0"+
    "\1\u0267\27\0\1\u022a\1\u0232\32\u022a\1\0\3\u022a\1\u0268"+
    "\12\u022a\1\u0233\1\u023b\13\u0233\1\u0269\16\u0233\1\0\16\u0233"+
    "\1\u023c\1\u0244\2\u023c\1\u026a\24\u023c\1\u0245\2\u023c\1\0"+
    "\17\u023c\1\u0244\7\u023c\1\u026b\17\u023c\1\u0245\2\u023c\1\0"+
    "\16\u023c\1\u022f\1\u0237\32\u022f\1\0\2\u022f\1\u026c\13\u022f"+
    "\24\0\1\u026d\26\0\1\u022a\1\u0232\32\u022a\1\0\4\u022a"+
    "\1\u026e\11\u022a\1\u0233\1\u023b\12\u0233\1\u026f\17\u0233\1\0"+
    "\16\u0233\1\u023c\1\u0244\4\u023c\1\u0270\22\u023c\1\u0245\2\u023c"+
    "\1\0\17\u023c\1\u0244\4\u023c\1\u0271\22\u023c\1\u0245\2\u023c"+
    "\1\0\16\u023c\1\u022f\1\u0237\13\u022f\1\u0272\16\u022f\1\0"+
    "\16\u022f\3\0\1\u0273\47\0\1\u022a\1\u0232\13\u022a\1\u0274"+
    "\16\u022a\1\0\16\u022a\1\u0233\1\u023b\1\u0233\1\u0275\30\u0233"+
    "\1\0\16\u0233\1\u023c\1\u0244\13\u023c\1\u0276\13\u023c\1\u0245"+
    "\2\u023c\1\0\17\u023c\1\u0244\5\u023c\1\u0277\21\u023c\1\u0245"+
    "\2\u023c\1\0\16\u023c\1\u022f\1\u0237\26\u022f\1\u0278\3\u022f"+
    "\1\0\16\u022f\27\0\1\u0279\23\0\1\u022a\1\u0232\5\u022a"+
    "\1\u027a\24\u022a\1\0\16\u022a\1\u0233\1\u023b\11\u0233\1\u027b"+
    "\20\u0233\1\0\16\u0233\1\u023c\1\u0244\17\u023c\1\u027c\7\u023c"+
    "\1\u0245\2\u023c\1\0\17\u023c\1\u0244\6\u023c\1\u027d\20\u023c"+
    "\1\u0245\2\u023c\1\0\16\u023c\1\u022f\1\u0237\1\u022f\1\u027e"+
    "\30\u022f\1\0\16\u022f\13\0\1\u027f\37\0\1\u022a\1\u0232"+
    "\11\u022a\1\u0280\20\u022a\1\0\16\u022a\1\u0233\1\u023b\2\u0233"+
    "\1\u0281\27\u0233\1\0\16\u0233\1\u023c\1\u0244\11\u023c\1\u0282"+
    "\15\u023c\1\u0245\2\u023c\1\0\17\u023c\1\u0244\2\u023c\1\u0283"+
    "\24\u023c\1\u0245\2\u023c\1\0\16\u023c\1\u022f\1\u0237\30\u022f"+
    "\1\u0284\1\u022f\1\0\16\u022f\24\0\1\u0285\26\0\1\u022a"+
    "\1\u0232\10\u022a\1\u0286\21\u022a\1\0\16\u022a\1\u0233\1\u023b"+
    "\1\u0287\31\u0233\1\0\16\u0233\1\u023c\1\u0244\2\u023c\1\u0288"+
    "\24\u023c\1\u0245\2\u023c\1\0\17\u023c\1\u0244\4\u023c\1\u0289"+
    "\22\u023c\1\u0245\2\u023c\1\0\16\u023c\1\u022f\1\u0237\13\u022f"+
    "\1\u028a\16\u022f\1\0\16\u022f\12\0\1\u028b\40\0\1\u0233"+
    "\1\u023b\17\u0233\1\u028c\12\u0233\1\0\16\u0233\1\u023c\1\u0244"+
    "\27\u023c\1\u0245\2\u023c\1\0\1\u023c\1\u028d\15\u023c\1\u0244"+
    "\13\u023c\1\u028e\13\u023c\1\u0245\2\u023c\1\0\16\u023c\1\u022f"+
    "\1\u0237\10\u022f\1\u028f\21\u022f\1\0\16\u022f\34\u0290\1\0"+
    "\16\u0290\1\u0233\1\u023b\10\u0233\1\u0291\21\u0233\1\0\16\u0233"+
    "\1\u023c\1\u0244\2\u023c\1\u0292\24\u023c\1\u0245\2\u023c\1\0"+
    "\17\u023c\1\u0244\17\u023c\1\u0293\7\u023c\1\u0245\2\u023c\1\0"+
    "\16\u023c\1\u0290\1\u0294\27\u0290\1\u0295\2\u0290\1\0\16\u0290"+
    "\1\u023c\1\u0244\13\u023c\1\u0296\13\u023c\1\u0245\2\u023c\1\0"+
    "\17\u023c\1\u0244\11\u023c\1\u0297\15\u023c\1\u0245\2\u023c\1\0"+
    "\16\u023c\1\u0290\1\u0294\7\u0290\1\u0298\17\u0290\1\u0295\2\u0290"+
    "\1\0\17\u0290\1\u0299\27\u0290\1\u0295\2\u0290\1\0\16\u0290"+
    "\1\u023c\1\u0244\26\u023c\1\u029a\1\u0245\2\u023c\1\0\17\u023c"+
    "\1\u0244\2\u023c\1\u029b\24\u023c\1\u0245\2\u023c\1\0\16\u023c"+
    "\1\u0290\1\u0294\4\u0290\1\u029c\22\u0290\1\u0295\2\u0290\1\0"+
    "\17\u0290\1\u0294\7\u0290\1\u029d\17\u0290\1\u0295\2\u0290\1\0"+
    "\16\u0290\1\u023c\1\u0244\10\u023c\1\u029e\16\u023c\1\u0245\2\u023c"+
    "\1\0\17\u023c\1\u0244\27\u023c\1\u0245\2\u023c\1\0\1\u023c"+
    "\1\u029f\14\u023c\1\u0290\1\u0294\5\u0290\1\u02a0\21\u0290\1\u0295"+
    "\2\u0290\1\0\17\u0290\1\u0294\4\u0290\1\u02a1\22\u0290\1\u0295"+
    "\2\u0290\1\0\16\u0290\1\u023c\1\u0244\2\u023c\1\u02a2\24\u023c"+
    "\1\u0245\2\u023c\1\0\16\u023c\1\u0290\1\u0294\6\u0290\1\u02a3"+
    "\20\u0290\1\u0295\2\u0290\1\0\17\u0290\1\u0294\5\u0290\1\u02a4"+
    "\21\u0290\1\u0295\2\u0290\1\0\16\u0290\1\u023c\1\u0244\13\u023c"+
    "\1\u02a5\13\u023c\1\u0245\2\u023c\1\0\16\u023c\1\u0290\1\u0294"+
    "\5\u0290\1\u02a6\21\u0290\1\u0295\2\u0290\1\0\17\u0290\1\u0294"+
    "\6\u0290\1\u02a7\20\u0290\1\u0295\2\u0290\1\0\16\u0290\1\u023c"+
    "\1\u0244\26\u023c\1\u02a8\1\u0245\2\u023c\1\0\16\u023c\1\u0290"+
    "\1\u0294\26\u0290\1\u02a9\1\u0295\2\u0290\1\0\17\u0290\1\u0294"+
    "\5\u0290\1\u02aa\21\u0290\1\u0295\2\u0290\1\0\16\u0290\1\u023c"+
    "\1\u0244\10\u023c\1\u02ab\16\u023c\1\u0245\2\u023c\1\0\16\u023c"+
    "\1\u0290\1\u0294\13\u0290\1\u02ac\13\u0290\1\u0295\2\u0290\1\0"+
    "\17\u0290\1\u0294\26\u0290\1\u02ad\1\u0295\2\u0290\1\0\17\u0290"+
    "\1\u0294\1\u0290\1\u02ae\25\u0290\1\u0295\2\u0290\1\0\17\u0290"+
    "\1\u0294\13\u0290\1\u02af\13\u0290\1\u0295\2\u0290\1\0\17\u0290"+
    "\1\u0294\11\u0290\1\u02b0\15\u0290\1\u0295\2\u0290\1\0\17\u0290"+
    "\1\u0294\1\u0290\1\u02b1\25\u0290\1\u0295\2\u0290\1\0\17\u0290"+
    "\1\u0294\1\u02b2\26\u0290\1\u0295\2\u0290\1\0\17\u0290\1\u0294"+
    "\11\u0290\1\u02b3\15\u0290\1\u0295\2\u0290\1\0\17\u0290\1\u0294"+
    "\26\u0290\1\u02b4\1\u0295\2\u0290\1\0\17\u0290\1\u0294\1\u02b5"+
    "\26\u0290\1\u0295\2\u0290\1\0\17\u0290\1\u0294\10\u0290\1\u02b6"+
    "\16\u0290\1\u0295\2\u0290\1\0\17\u0290\1\u0294\26\u0290\1\u02b7"+
    "\1\u0295\2\u0290\1\0\17\u0290\1\u0294\10\u0290\1\u02b8\16\u0290"+
    "\1\u0295\2\u0290\1\0\16\u0290";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29111];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\1\1\1\11\3\1\16\0"+
    "\1\11\117\0\1\11\30\0\1\11\11\0\1\11\62\0"+
    "\1\11\u0149\0\1\11\22\0\1\11\35\0\1\11\37\0"+
    "\1\1\2\0\1\1\44\0\1\1\10\0\1\1\1\0"+
    "\1\1\14\0\1\1\14\0\1\1\12\0\1\1\1\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[696];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	// AGRIF
	private List<Agrif> agrifs ;
	private Agrif agrif ;
	private Citation citation ;
	private ControlledBlock cblock ;
	private Creator creator ;
	private Expression expression ;
	private Item item ;
	private LanguageBlock lblock ;
	private Manifestation manifestation ;
	private Relation relation ;
	private Rights rights ;
	private Publisher publisher ;
	
	// TMP
	private StringBuilder tmp ;
	private String language ;
	private String date = null ;
	private List<Publisher> publishers = new ArrayList<Publisher>() ;
	
	// EXERNAL
	private String providerId ;
	private String manifestationType = "landingPage" ;
	
	public void setManifestationType( String manifestationType )
	{
		this.manifestationType = manifestationType ;
	}
	
	public void setProviderId( String providerId )
	{
		this.providerId = providerId ;
	}
	
	public List<Agrif> getAgrifs()
	{
		return agrifs ;
	}
	
	private void init()
	{
		agrif = new Agrif() ;
		agrif.setSet( providerId ) ;
		citation  = new Citation() ;
		cblock = new ControlledBlock() ;
		expression = new Expression() ;
		expression.setLanguage( "en" ) ;
		lblock = new LanguageBlock() ;
		relation = new Relation() ;
		rights = new Rights() ;
		rights.setIdentifier( "https://www.gov.uk/government/publications/dfid-research-open-and-enhanced-access-policy" ) ;
		rights.setRightsStatement( "en", "The aim of this open access policy is to increase the uptake and use of DFID research." ) ;
		agrif.setRights( rights ) ;
	}
		
	private String utcNow() 
	{
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd" );
		return sdf.format(cal.getTime());
	}
	
	private String extract( String element )
	{	
		return element.substring(element.indexOf(">") + 1 , element.indexOf("</") );
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DC2AGRIF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  DC2AGRIF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { creator = new Creator() ;
		creator.setName( extract( yytext() ) ) ;
		// creator.setType( "org" ) ;
		agrif.setCreator( creator ) ;
          }
        case 21: break;
        case 18: 
          { manifestation = new Manifestation() ;
		item = new Item() ;
		item.setDigitalItem( extract( yytext() ) ) ;
		manifestation.setManifestationType( "fullText" ) ;
		manifestation.setFormat( "application/pdf" ) ;
		manifestation.setItem( item ) ;
		expression.setManifestation( manifestation ) ;
          }
        case 22: break;
        case 9: 
          { tmp = new StringBuilder() ;
		yybegin( TITLE ) ;
          }
        case 23: break;
        case 17: 
          { manifestation = new Manifestation() ;
		item = new Item() ;
		item.setDigitalItem( extract( yytext() ) ) ;
		manifestation.setManifestationType( "landingPage" ) ;
		manifestation.setFormat( "text/html" ) ;
		manifestation.setItem( item ) ;
		expression.setManifestation( manifestation ) ;
          }
        case 24: break;
        case 16: 
          { relation = new Relation() ;
		relation.setTypeOfRelation( "isPartOf" ) ;
		relation.setTypeOfReference( "URI" ) ;
		relation.setReference( extract( yytext() ) ) ;
		agrif.setRelation( relation ) ;
          }
        case 25: break;
        case 1: 
          { //throw new Error("Illegal character <"+ yytext()+">") ;
          }
        case 26: break;
        case 13: 
          { String type = extract( yytext() ) ;
		cblock.setType( "dcterms", type ) ;
          }
        case 27: break;
        case 20: 
          { creator = new Creator() ;
		creator.setName( extract( yytext() ) ) ;
		creator.setType( "person" ) ;
		agrif.setCreator( creator ) ;
          }
        case 28: break;
        case 7: 
          { agrif.setExpression( expression ) ;
		agrif.setLanguageBlocks( lblock ) ;
		agrif.setControlled( cblock ) ;
		agrifs.add( agrif ) ;
		yybegin( YYINITIAL ) ;
          }
        case 29: break;
        case 6: 
          { String tmptext = tmp.toString() ;
		language = ParamManager.getInstance().getLanguageFor( tmptext ) ;
		yybegin( AGRIF ) ;
		lblock.setTitle( language, tmptext ) ;
          }
        case 30: break;
        case 5: 
          { agrifs = new ArrayList<Agrif>() ;
		init() ;
		yybegin( AGRIF ) ;
          }
        case 31: break;
        case 2: 
          { tmp.append( yytext() ) ;
          }
        case 32: break;
        case 14: 
          { String tmptext = extract( yytext() ) ;
		language = ParamManager.getInstance().getLanguageFor( tmptext ) ;
		lblock.setKeyword( language, tmptext ) ;
          }
        case 33: break;
        case 4: 
          { // ignore !
          }
        case 34: break;
        case 3: 
          { tmp.append( " " ) ;
          }
        case 35: break;
        case 8: 
          { yybegin( AGRIF ) ;
		String tmptext = tmp.toString() ;
		language = ParamManager.getInstance().getLanguageFor( tmptext ) ;
		lblock.setAbstract( language, tmptext ) ;
          }
        case 36: break;
        case 11: 
          { tmp = new StringBuilder() ;
		yybegin( DESCRIPTION ) ;
          }
        case 37: break;
        case 10: 
          { // ignore!
          }
        case 38: break;
        case 12: 
          { date = extract( yytext() ) ;
		publisher = new Publisher() ;
		publisher.setDate( date.substring(0, 4) ) ;
		expression.setPublisher( publisher ) ;
          }
        case 39: break;
        case 15: 
          { cblock.setSpatialCoverage( "unknown", extract( yytext() ) ) ;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java DC2AGRIF <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        DC2AGRIF scanner = null;
        try {
          scanner = new DC2AGRIF( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
